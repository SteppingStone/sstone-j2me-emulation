<?xml version="1.0"?>
<project name="sstone-j2me-emulation" default="package" basedir=".">
  <description>
    This project provides a layer to support running the sstone-j2me
    from within the sstone-dat application in microemulator.
  </description>

  <property environment="env"/>
  <property name="build.config.dir" value='src/build'/>
  <typedef file="${build.config.dir}/io.antlib.xml"/>

  <condition property='user.properties.location'
    value='${env.HSEED_USER_PROPERTIES_FILE}'
    else='${build.config.dir}/user.properties'>
    <isset property='env.HSEED_USER_PROPERTIES_FILE'/>
  </condition>

  <property file="${user.properties.location}"/>

  <condition property='m2.repo' value='${env.M2_REPO}' else='${user.home}/.m2/repository'>
    <isset property='env.M2_REPO'/>
  </condition>
  <property name='maven.ant.tasks.jar' value='${m2.repo}/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.jar'/>

  <property file="${build.config.dir}/project.properties"/>
  <condition property='has_all_deps'>
    <and>
      <available file='${antenna.jar}'/>
      <available file='${junit.jar}'/>
      <available file='${sstone.common.jar}'/>
      <available file='${sstone.j2me.common.jar}'/>
      <available file='${sstone.j2me.jar}'/>
      <available file='${sstone.model.reader.jar}'/>
      <available file='${microemu.midp.jar}'/>
    </and>
  </condition>

  <property name='wtk.home' value='${wtk.home.sun}'/>

  <path id='project.classpath'>
    <pathelement path="${antenna.jar}"/>
    <fileset file="${wtk.home}/lib/jsr75.jar"/>
    <fileset file="${sstone.common.jar}"/>
    <fileset file='${sstone.j2me.common.jar}'/>
    <fileset file='${sstone.j2me.jar}'/>
    <fileset file='${sstone.model.reader.jar}'/>
  </path>

  <path id='test.compile.classpath'>
    <pathelement path="${project.classpath}"/>
    <pathelement path="${project.build.outputDirectory}"/>
    <fileset file="${junit.jar}"/>
    <fileset file="${sstone.common.jar}"/>
    <fileset file='${sstone.j2me.common.jar}'/>
    <fileset file='${sstone.j2me.jar}'/>
    <fileset file='${sstone.model.reader.jar}'/>
    <fileset file='${microemu.midp.jar}'/>
  </path>

  <path id='test.run.classpath'>
    <pathelement path="${project.classpath}"/>
    <pathelement path="${project.build.outputDirectory}"/>
    <pathelement path="${project.build.testOutputDirectory}"/>
    <fileset file="${sstone.common.jar}"/>
    <fileset file='${sstone.j2me.common.jar}'/>
    <fileset file='${sstone.j2me.jar}'/>
    <fileset file='${sstone.model.reader.jar}'/>
    <fileset file="${junit.jar}"/>
    <fileset file='${microemu.midp.jar}'/>
  </path>

  <condition property="windows">
    <os family="windows"/>
  </condition>

  <fail message='To use this build, you must set a wtk.home property to point to the install root of your j2me WTK'>
    <condition>
      <not>
        <resourceexists>
          <file file="${wtk.home}"/>
        </resourceexists>
      </not>
    </condition>
  </fail>

  <!-- ======= -->
  <!-- Targets -->
  <!-- ======= -->
  <target name='package' depends='initialize, resolve, compile, test, jar' description='Build the project'/>

  <target name='jar' description='package contents into a jar' depends='resolve'>
    <jar destfile="${jarfile}">
      <fileset dir="${project.build.outputDirectory}"/>
      <!-- <fileset dir="${project.build.resources}"/> -->
    </jar>
  </target>

  <target name='compile' description='compile java sources' depends='initialize,resolve'>
    <wtkbuild srcdir="${project.build.sourceDirectory}"
              destdir="${project.build.outputDirectory}"
              classpathref="project.classpath"
              preverify="false"/>
  </target>

  <target name='test' description='run all tests' depends='process-test-resources,test:junit'/>

  <target name='test-compile' description='compile unit tests' depends='compile'>
    <javac srcdir='${project.build.testSourceDirectory}'
           destdir='${project.build.testOutputDirectory}'
           classpathref='test.compile.classpath'
           source='1.1'/>
  </target>

  <target name='process-test-resources'>
    <copy todir="${project.build.testOutputDirectory}">
      <fileset dir="src/test/resources"/>
    </copy>
  </target>

  <target name='test:junit' description='unit tests' depends='test-compile'>
    <junit haltonerror="true" haltonfailure="true">
      <classpath refid="test.run.classpath" />
      <formatter type="brief" usefile="false" />
      <batchtest fork="yes">
        <fileset dir="${project.build.testOutputDirectory}" includes="**/*Test.class"/>
      </batchtest>
    </junit>
  </target>

  <target name='clean' description='delete the target directory, including compiled class, jar and jad files'>
    <delete dir="${project.build.directory}"/>
  </target>

  <target name='initialize' description='initialize target directories'>
    <mkdir dir="${project.build.outputDirectory}"/>
    <mkdir dir="${project.build.testOutputDirectory}"/>
    <mkdir dir="${lib.dir}"/>

    <!--
      lib.classpath will include lib/*jar, any jars specified on the ant
      command line with -lib, and all jars in ant's lib directory (including ones
      symlinked there)
    -->
    <path id="lib.classpath">
      <fileset dir="${lib.dir}" includes="*.jar"/>
      <pathelement path="${java.class.path}"/>
    </path>

  </target>

  <!-- ============ -->
  <!-- Dependencies -->
  <!-- ============ -->

  <!-- use the maven ant plugin to resolve dependencies -->
  <target name='resolve:maven' description='get build deps with maven ant tasks' depends='initialize' unless='has_all_deps'>
    <available classname='org.apache.maven.artifact.Artifact' property='maven_ant_tasks_available' classpathref='lib.classpath'/>
    <antcall target='download-maven-ant-tasks' inheritAll='true' inheritRefs='true'/>
  </target>

  <!--
    TODO: do not use single hard-coded maven-ant-tasks URL... randomly
    select location from a handful of known URLs?
  -->
  <target name='download-maven-ant-tasks' depends='initialize' unless='maven_ant_tasks_available'>
     <exec executable="mvn">
       <arg value="dependency:resolve"/>
     </exec>
     <linkOrCopy file="${maven.ant.tasks.jar}" tofile="${lib.dir}/maven-ant-tasks.jar"/>
  </target>

  <!--
    Once we have the maven ant tasks, we can resolve our deps and copy them to the lib.dir
  -->
  <target name='resolve' depends='resolve:deps'>
    <taskdef resource="antenna.properties" classpathref="lib.classpath"/>
  </target>

  <target name='resolve:deps' description='retrieve dependencies with maven and copy them to lib.dir'
      depends='initialize,resolve:maven' unless='has_all_deps'>
      <!-- 
        NOTE: we MUST use typedef not multiple taskdef calls otherwise the
        maven ant task classes are left in an invalid state
      -->
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" classpathref='lib.classpath'/>

    <dependencies filesetId="dependency.fileset" useScope="runtime">
      <dependency groupId="${sstone.j2me.common.groupId}" artifactId="${sstone.j2me.common.artifactId}" version="${sstone.j2me.common.version}"/>
      <dependency groupId="${sstone.common.groupId}" artifactId="${sstone.common.artifactId}" version="${sstone.common.version}"/>
      <dependency groupId="${sstone.model.reader.groupId}" artifactId="${sstone.model.reader.artifactId}" version="${sstone.model.reader.version}"/>
      <dependency groupId="${sstone.j2me.groupId}" artifactId="${sstone.j2me.artifactId}" version="${sstone.j2me.version}"/>

      <dependency groupId="net.sf.antenna" artifactId="antenna" version="${antenna.version}"/>
      <dependency groupId="junit" artifactId="junit" version="${junit.version}"/>

      <!-- we need microemu for test compilation -->
      <dependency groupId="org.microemu" artifactId="microemu-midp" version="${microemu.version}"/>
    </dependencies>

    <linkOrCopyFiles fileset="dependency.fileset" todir="${lib.dir}"/>

  </target>

  <target name='install' description='Install to the local maven repo' depends='package'>
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" classpathref='lib.classpath'/>
    <install file="${jarfile}">
      <pom id="pom" file="pom.xml" />
    </install>
  </target>

</project>
